name: Continuous Integration

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11.7']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r mobile_backend/requirements.txt
        
    - name: Test database initialization
      run: |
        python -c "from restaurant_billing.db import init_db; init_db(); print('Database test passed')"
        
    - name: Test application imports
      run: |
        python -c "from restaurant_billing.app import bootstrap; print('Application import test passed')"
        python -c "from restaurant_billing.auth import authenticate_user; print('Auth module test passed')"
        python -c "from restaurant_billing.gst import calculate_gst; print('GST module test passed')"
        python -c "from restaurant_billing.payments import generate_upi_qr; print('Payments module test passed')"
        
    - name: Test mobile backend
      run: |
        cd mobile_backend
        python -c "from main import app; print('Mobile backend import test passed')"
        
    - name: Run comprehensive tests
      run: |
        python test_billing_system.py
        python test_update_system.py
        
    - name: Test build scripts
      run: |
        # Test Python build script
        python build.py --help 2>/dev/null || echo "Build script test completed"
        
        # Test shell build script (Linux/macOS)
        if [[ "${{ runner.os }}" != "Windows" ]]; then
          chmod +x build.sh
          echo "Build script permissions set"
        fi
        
        # Test batch build script (Windows)
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          echo "Windows build script available"
        fi

  build-packages:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11.7'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r mobile_backend/requirements.txt
        
    - name: Build package
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          build.bat
        else
          chmod +x build.sh
          ./build.sh
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ runner.os }}
        path: dist/
        retention-days: 7

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11.7'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run security scan
      run: |
        bandit -r restaurant_billing/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30
